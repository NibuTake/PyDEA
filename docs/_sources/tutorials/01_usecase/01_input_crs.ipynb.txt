{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# Input oriented model\n\nThe following DEA model is an input-oriented model where the inputs are minimized and the outputs are kept at their current levels.\n\n\\begin{align}& \\theta^* = \\min \\theta, subject \\ to \\\\\n    & \\sum_{j=1}^{n} \\lambda_j x_{i, j} \\leq \\theta x_{i, o}, i=1,2, \\dots, m; \\\\\n    & \\sum_{j=1}^{n} \\lambda_j y_{r, j} \\geq y_{r, o}, r=1,2, \\dots, s; \\\\\n    & \\sum_{j=1}^{n} \\lambda_j = 1 \\\\\n    & \\lambda_j \\geq 0, j=1,2, \\dots, n.\\end{align}\n\nwhere $DMU_o$ represents one of the $n$ DMUs under evaluation,\nand $x_{i, o}$ and $y_{i, o}$ are the $i$ th input and $r$ th output\nfor $DMU_o$, respectively.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Import modules and prepare data.\nSample supply chain data is generated.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom Pyfrontier.frontier_model import EnvelopDEA\n\nsupply_chain_df = pd.DataFrame(\n    {\"day\": [1, 2, 4, 6, 4], \"cost\": [5, 2, 1, 1, 4], \"profit\": [15, 15, 15, 15, 15]}\n)\nsupply_chain_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Fit dea model.\n\nThe necessity inputs are inputs and outputs. The result has below belongings.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dea = EnvelopDEA(\"CRS\", \"in\")\ndea.fit(\n    supply_chain_df[[\"day\", \"cost\"]].to_numpy(),\n    supply_chain_df[[\"profit\"]].to_numpy(),\n)\n\ndea.result[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Visualize the result.\n\n.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "eff_dmu = [r.dmu for r in dea.result if r.is_efficient]\nineff_dmu = [r.dmu for r in dea.result if r.is_efficient != 1]\nweak_eff_dmu = [r.dmu for r in dea.result if r.has_slack]\n\nplt.figure()\nplt.plot(\n    [d.input[0] for d in eff_dmu],\n    [d.input[1] for d in eff_dmu],\n    \"-o\",\n    label=\"efficient dmu\",\n)\nplt.plot(\n    [d.input[0] for d in ineff_dmu],\n    [d.input[1] for d in ineff_dmu],\n    \"o\",\n    label=\"not-efficient dmu\",\n)\nplt.plot(\n    [d.input[0] for d in weak_eff_dmu],\n    [d.input[1] for d in weak_eff_dmu],\n    \"o\",\n    label=\"weak-efficient dmu\",\n)\nplt.plot([4, 6], [1, 1], linestyle=\"--\", color=\"black\")\nplt.legend()\nplt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## About slack\n\n.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "print([r.score for r in dea.result])\nprint([r.is_efficient for r in dea.result])\nprint([r.has_slack for r in dea.result])\n\nprint(dea.result[-2].x_slack, dea.result[-2].y_slack)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}