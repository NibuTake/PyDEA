
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/01_usecase/02_output_crs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_01_usecase_02_output_crs.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_01_usecase_02_output_crs.py:


Output oriented model
=========================

The following DEA model is an output-oriented model where the outputs are maximizing and the inputs are kept at their current levels.

.. math::
    & \theta^* = \min \theta, subject \ to \\
    & \sum_{j=1}^{n} \lambda_j x_{i, j} \leq x_{i, o}, i=1,2, \dots, m; \\
    & \sum_{j=1}^{n} \lambda_j y_{r, j} \geq \theta y_{r, o}, r=1,2, \dots, s; \\
    & \sum_{j=1}^{n} \lambda_j = 1 \\
    & \lambda_j \geq 0, j=1,2, \dots, n.

where :math:`DMU_o` represents one of the :math:`n` DMUs under evaluation,
and :math:`x_{i, o}` and :math:`y_{i, o}` are the :math:`i` th input and :math:`r` th output
for :math:`DMU_o`, respectively.

.. GENERATED FROM PYTHON SOURCE LINES 20-23

Import modules and prepare data.
------------------------
Average of rental properties in a given district.

.. GENERATED FROM PYTHON SOURCE LINES 23-33

.. code-block:: Python


    import matplotlib.pyplot as plt
    import pandas as pd

    from Pyfrontier.frontier_model import EnvelopDEA

    rent_average_df = pd.DataFrame(
        {"rent": [5, 5, 5, 5], "n_room": [6, 5, 2, 3.0], "n_storage": [2, 3.5, 5, 3.5]}
    )
    rent_average_df





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>rent</th>
          <th>n_room</th>
          <th>n_storage</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>5</td>
          <td>6.0</td>
          <td>2.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>5</td>
          <td>5.0</td>
          <td>3.5</td>
        </tr>
        <tr>
          <th>2</th>
          <td>5</td>
          <td>2.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>5</td>
          <td>3.0</td>
          <td>3.5</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 34-38

Fit dea model.
------------------------------

The necessity inputs are inputs and outputs. The result has below belongings.

.. GENERATED FROM PYTHON SOURCE LINES 38-45

.. code-block:: Python

    dea = EnvelopDEA("CRS", "out")
    dea.fit(
        rent_average_df[["rent"]].to_numpy(),
        rent_average_df[["n_room", "n_storage"]].to_numpy(),
    )

    dea.result[0]




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    EnvelopResult(score=1.0, id=0, dmu=DMU(input=array([5]), output=array([6., 2.]), id=0), weights=[1.0, 0.0, 0.0, 0.0], x_slack=[0.0], y_slack=[0.0, 0.0])



.. GENERATED FROM PYTHON SOURCE LINES 46-50

Visualize the result.
------------------------------

In the built documentation.

.. GENERATED FROM PYTHON SOURCE LINES 50-74

.. code-block:: Python

    eff_dmu = [r.dmu for r in dea.result if r.is_efficient]
    ineff_dmu = [r.dmu for r in dea.result if r.is_efficient != 1]

    plt.figure()
    plt.plot(
        [d.output[0] for d in eff_dmu],
        [d.output[1] for d in eff_dmu],
        "-o",
        label="efficient dmu",
    )
    plt.plot(
        [d.output[0] for d in ineff_dmu],
        [d.output[1] for d in ineff_dmu],
        "o",
        label="not-efficient dmu",
    )
    plt.plot([6, 6], [2, 0], color="C0")
    plt.plot([2, 0], [5, 5], color="C0")
    plt.plot([0, 3.6], [0, 4.2], color="black", linestyle="--")

    plt.legend()
    plt.show()





.. image-sg:: /tutorials/01_usecase/images/sphx_glr_02_output_crs_001.png
   :alt: 02 output crs
   :srcset: /tutorials/01_usecase/images/sphx_glr_02_output_crs_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 75-79

About slack
------------------------------

In the built documentation.

.. GENERATED FROM PYTHON SOURCE LINES 79-85

.. code-block:: Python


    print([r.score for r in dea.result])
    print([r.is_efficient for r in dea.result])
    print([r.has_slack for r in dea.result])

    print(dea.result[-2].x_slack, dea.result[-2].y_slack)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1.0, 1.0, 1.0, 1.2]
    [True, True, True, False]
    [False, False, False, False]
    [0.0] [0.0, 0.0]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.389 seconds)


.. _sphx_glr_download_tutorials_01_usecase_02_output_crs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02_output_crs.ipynb <02_output_crs.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02_output_crs.py <02_output_crs.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
